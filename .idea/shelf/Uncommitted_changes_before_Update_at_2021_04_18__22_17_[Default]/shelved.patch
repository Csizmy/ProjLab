Index: src/Objects/Asteroid.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Objects;\r\n\r\nimport Game_parts.Game;\r\nimport Materials.*;\r\nimport Miners.Miner;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Random;\r\n\r\npublic class Asteroid extends Spacething {\r\n    private int layer;              // Sziklaréteg\r\n    private int digged;             // Kiásott rétegek\r\n    private boolean perihelion;     // napközelség\r\n    private Material material;\r\n    private ArrayList<Miner> miners;\r\n\r\n    private Random rand = new Random();\r\n\r\n    public Asteroid(int asteroidID, int lay, int d, String mat){\r\n        super(asteroidID);\r\n        layer = lay;\r\n        digged = d;\r\n        miners = new ArrayList<Miner>();\r\n        if(mat.equals( \"Coal\")){material = new Coal(this);}\r\n        if(mat.equals(\"Iron\")){material = new Iron(this);}\r\n        if(mat.equals(\"Water\")){material = new Water(this);}\r\n        if(mat.equals(\"Uranium\")){material = new Uranium(this);}\r\n        if(mat.equals(\"null\")){material = null;}\r\n    }\r\n    // Asteroid konstruktor\r\n    public Asteroid(int asteroidID) {\r\n        super(asteroidID);\r\n        layer = (int) rand.nextInt(7)+3;    //Min: 3, Max: 9\r\n\r\n        digged = 0;     //0 réteg van eddig ásva\r\n\r\n        miners = new ArrayList<Miner>();\r\n\r\n        //Random anyag kerül az aszteroida közepébe\r\n        int mat = (int) rand.nextInt(5);\r\n        switch (mat){\r\n            case 0: material = new Coal(this); break;\r\n            case 1: material = new Iron(this); break;\r\n            case 2: material = new Uranium(this); break;\r\n            case 3: material = new Water(this); break;\r\n            case 4: material = null;\r\n        }\r\n\r\n    }\r\n\r\n    // Asteroid konstruktor\r\n    public Asteroid(int asteroidID, int layer, boolean perihelion, Material material) {\r\n        super(asteroidID);\r\n\r\n        this.material = material;\r\n        this.layer = layer;\r\n        this.digged = 0;\r\n        this.miners = new ArrayList<Miner>();\r\n        this.id = asteroidID;\r\n        this.perihelion = perihelion;\r\n    }\r\n\r\n    //csökkenti a sziklarétegek számát az adott aszteroidán\r\n    public void removeLayer(){\r\n        digged++;\r\n    }\r\n\r\n    // Ha nem üres az aszteroida (és a napközelség nem zavar bele a műveletbe), kiveszi belőle az adott nyersanyagot\r\n    public void RemoveMaterial() {\r\n        digged = layer;\r\n        material = null;\r\n    }\r\n\r\n    //Egy játékost \"eltávolít\" a rajta tartózkodók közül\r\n    public void removeMiner(Miner m){\r\n        miners.remove(m);\r\n    }\r\n\r\n\r\n    //Egy játékost \"hozzáad\" a rajta tartózkodókhoz\r\n    public void addMiner(Miner m){\r\n        miners.add(m);\r\n    }\r\n\r\n    //Az aszteroida felrobban ha uránt napközelben bányásznak, ekkor a rajta levő Miner-ekre különbözően hat\r\n    public void Explode(){\r\n        for (Miner m: miners) {\r\n            m.Explode();\r\n        }\r\n    }\r\n\r\n    //Visszatér a bolygón lévő telepesek nyersanyag listájával.\r\n    public ArrayList<Material> CountDiffMat(){\r\n        ArrayList<Material> materials = new ArrayList<Material>();\r\n        for(int i = 0; i < miners.size(); i++) {\r\n            ArrayList<Material> backpack = miners.get(i).getBackpack();\r\n            for (int j = 0; j < backpack.size(); j++) {\r\n                materials.add(backpack.get(j));\r\n            }\r\n        }\r\n        return materials;\r\n    }\r\n\r\n    //A napközelséget vizsgálom és irom felül.\r\n    public void Step(){}\r\n\r\n    // a megadott teleportot az aszteroidához köti\r\n    public void SetUpTeleport(Teleport t){}\r\n\r\n    // getterek és setterek a megadott változókhoz\r\n    public int getLayer() {\r\n        return layer;\r\n    }\r\n\r\n    public Material getMaterial() {\r\n        return material;\r\n    }\r\n\r\n    public boolean getPerihelion(){\r\n        return perihelion;\r\n    }\r\n\r\n    public int getDigged() {\r\n        return digged;\r\n    }\r\n\r\n    public int getId(){\r\n        return id;\r\n    }\r\n\r\n    public ArrayList<Miner> getMiners(){\r\n        return  miners;\r\n    }\r\n\r\n    public void setLayer(int layer) {\r\n        this.layer = layer;\r\n    }\r\n\r\n    public void setMaterial(Material m){\r\n        this.material = m;\r\n    }\r\n\r\n    public void setPerihelion(boolean b){\r\n        this.perihelion = b;\r\n    }\r\n\r\n    @Override\r\n    public void AddNeighbor(Spacething s) {\r\n        super.AddNeighbor(s);\r\n    }\r\n\r\n    public void listNeighbors(){\r\n        if(neighbours.isEmpty()==true){\r\n            System.out.println(\"Hiba: nincs szomszed \"+this.getId());\r\n        }\r\n        for(Spacething s: neighbours){\r\n            if(s.isAsteroid()==true)\r\n            System.out.println(\"Asteroid \"+s.getId());\r\n            else{\r\n                System.out.println(\"Teleport \"+s.getId());\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean isAsteroid(){return true;}\r\n\r\n    public boolean checkWin(){\r\n        ArrayList<Material> bolygon= new ArrayList<>();\r\n        for(Miner m: miners){\r\n            for(Material mat: m.getBackpack()){\r\n                bolygon.add(mat);\r\n            }\r\n        }\r\n        int[] matTomb =new int[]{ 0,0,0,0 };\r\n        for (Material mat: bolygon){\r\n            if (mat.getName().equals(\"Uranium\")){\r\n                matTomb[0]++;\r\n            }\r\n            else if(mat.getName().equals(\"Water\")){\r\n                matTomb[1]++;\r\n            }\r\n            else if(mat.getName().equals(\"Coal\")){\r\n                matTomb[2]++;\r\n            }\r\n            else if(mat.getName().equals(\"Iron\")){\r\n                matTomb[3]++;\r\n            }\r\n        }\r\n        for(int i=0; i<4; i++){\r\n            if(matTomb[i]<3){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Objects/Asteroid.java b/src/Objects/Asteroid.java
--- a/src/Objects/Asteroid.java	(revision b410b6396446a3b498aa9ab82e0830a72980c389)
+++ b/src/Objects/Asteroid.java	(date 1618777037997)
@@ -1,13 +1,14 @@
 package Objects;
 
 import Game_parts.Game;
+import Game_parts.Steppable;
 import Materials.*;
 import Miners.Miner;
 
 import java.util.ArrayList;
 import java.util.Random;
 
-public class Asteroid extends Spacething {
+public class Asteroid extends Spacething implements Steppable {
     private int layer;              // Sziklaréteg
     private int digged;             // Kiásott rétegek
     private boolean perihelion;     // napközelség
